// Generated by CoffeeScript 1.6.2
(function() {
  var Shavaluator, prepopulateExampleSet, redisClient, shavaluator, should, testHelper, testKeys, _;

  _ = require('underscore');

  should = require('should');

  Shavaluator = require('../lib/shavaluator');

  testHelper = require('./test_helper');

  redisClient = null;

  shavaluator = new Shavaluator;

  shavaluator.load(require('./sample_lua_commands'));

  prepopulateExampleSet = function(callback) {
    return redisClient.zadd('testSet', 1, 'one', 2, 'two', 3, 'three', 4, 'four', function(err, result) {
      return callback();
    });
  };

  testKeys = {
    a: 1,
    b: 2,
    c: 3,
    d: 4
  };

  describe('Redis Lua commands', function() {
    before(function() {
      redisClient = testHelper.getRedisClient();
      return shavaluator.redis = redisClient;
    });
    beforeEach(function(done) {
      return redisClient.flushdb(function() {
        return done();
      });
    });
    describe('setnx_pexpire', function() {
      var ttl;

      ttl = 50;
      describe("with key that hasn't been set yet", function() {
        it('returns 1 for keys the do not yet exist', function(done) {
          return shavaluator.setnx_pexpire({
            keys: 'testKey',
            args: ['testValue', ttl]
          }, function(err, result) {
            result.should.eql(1);
            return done();
          });
        });
        return it('sets the expiration correctly', function(done) {
          return shavaluator.setnx_pexpire({
            keys: 'testKey',
            args: ['testValue', ttl]
          }, function(err, result) {
            return redisClient.pttl('testKey', function(err, result) {
              result.should.not.be.below(0);
              result.should.not.be.above(this.ttl);
              return done();
            });
          });
        });
      });
      return describe("with key that already exists", function(done) {
        beforeEach(function(done) {
          return redisClient.set('testKey', 'testValue', function(err, result) {
            return done();
          });
        });
        it('does not set the key', function(done) {
          return shavaluator.setnx_pexpire({
            keys: 'testKey',
            args: ['newValue', ttl]
          }, function(err, result) {
            result.should.eql(0);
            return done();
          });
        });
        return it('does not set an expiration time', function(done) {
          return redisClient.pttl('testKey', function(err, result) {
            result.should.eql(-1);
            return done();
          });
        });
      });
    });
    describe('zmembers', function() {
      describe('with nonexisting key', function() {
        return it('returns an empty array', function(done) {
          return shavaluator.zmembers({
            keys: 'nonexistingKey'
          }, function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.length.should.eql(0);
            return done();
          });
        });
      });
      return describe('with prepopulated set', function() {
        beforeEach(function(done) {
          return prepopulateExampleSet(done);
        });
        return it('returns arguments that are members of the sorted set', function(done) {
          return shavaluator.zmembers({
            keys: 'testSet',
            args: ['one', 'three', 'five']
          }, function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.should.eql(['one', 'three']);
            return done();
          });
        });
      });
    });
    describe('znotmembers', function() {
      describe('with nonexisting key', function() {
        return it('returns complete array', function(done) {
          var args;

          args = ['one', 'two', 'three'];
          return shavaluator.znotmembers({
            keys: 'nonexistingKey',
            args: args
          }, function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.should.eql(args);
            return done();
          });
        });
      });
      return describe('with prepopulated set', function() {
        beforeEach(function(done) {
          return prepopulateExampleSet(done);
        });
        return it('returns arguments that are members of the sorted set', function(done) {
          return shavaluator.znotmembers({
            keys: 'testSet',
            args: ['zero', 'one', 'three', 'five']
          }, function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.should.eql(['zero', 'five']);
            return done();
          });
        });
      });
    });
    return describe('delequal', function() {
      beforeEach(function(done) {
        var args, k, v;

        args = [];
        for (k in testKeys) {
          v = testKeys[k];
          args.push(k);
          args.push(v);
        }
        args.push(function(err, result) {
          return done();
        });
        return redisClient.mset.apply(redisClient, args);
      });
      it('returns zero if the key does not exist', function(done) {
        return shavaluator.delequal({
          keys: 'nonexistent',
          args: '1'
        }, function(err, result) {
          if (err != null) {
            err.should.be["false"]();
          }
          result.should.eql(0);
          return done();
        });
      });
      it('deletes single keys when the matching value is sent', function(done) {
        return shavaluator.delequal({
          keys: 'a',
          args: testKeys.a
        }, function(err, result) {
          if (err != null) {
            err.should.be["false"]();
          }
          result.should.eql(1);
          return redisClient.get('a', function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            (result === null).should.eql(true);
            return done();
          });
        });
      });
      it('does not delete a single key when an unmatching value is sent', function(done) {
        return shavaluator.delequal({
          keys: 'a',
          args: 'x'
        }, function(err, result) {
          if (err != null) {
            err.should.be["false"]();
          }
          result.should.eql(0);
          return redisClient.get('a', function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.should.eql('1');
            return done();
          });
        });
      });
      return it('only deletes keys that match', function(done) {
        var deleteParams;

        deleteParams = {
          keys: ['a', 'b', 'c', 'd'],
          args: [1, 'x', 3, 'x']
        };
        return shavaluator.delequal(deleteParams, function(err, result) {
          if (err != null) {
            err.should.be["false"]();
          }
          result.should.eql(2);
          return redisClient.mget('a', 'b', 'c', 'd', function(err, result) {
            if (err != null) {
              err.should.be["false"]();
            }
            result.should.eql([null, '2', null, '4']);
            return done();
          });
        });
      });
    });
  });

}).call(this);
