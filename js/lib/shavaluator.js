// Generated by CoffeeScript 1.6.2
(function() {
  var Shavaluator, crypto, defaultConfig, inspect, puts, sha1, _, _ref,
    __slice = [].slice;

  _ref = require('util'), puts = _ref.puts, inspect = _ref.inspect;

  crypto = require('crypto');

  _ = require('underscore');

  sha1 = function(string) {
    return crypto.createHash('sha1').update(string, 'utf8').digest('hex');
  };

  defaultConfig = {
    autobind: true
  };

  module.exports = Shavaluator = (function() {
    Shavaluator.hashifyScript = function(lua) {
      return {
        lua: lua,
        sha: sha1(lua)
      };
    };

    Shavaluator._parseEvalParams = function() {
      var args, callback, keys, params, _ref1, _ref2;

      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      callback = _.isFunction(params[params.length - 1]) ? params.pop() : null;
      if (params.length === 1 && _.isObject(params[0])) {
        if (_.isArray(params[0])) {
          params = params[0];
        } else {
          keys = (_ref1 = params[0].keys) != null ? _ref1 : [];
          keys = _.isArray(keys) ? keys : [keys];
          args = (_ref2 = params[0].args) != null ? _ref2 : [];
          args = _.isArray(args) ? args : [args];
          if (keys.length === 0 && args.length === 0) {
            params = [];
          } else {
            params = [keys.length].concat(keys).concat(args);
          }
        }
      }
      return {
        params: params,
        callback: callback
      };
    };

    function Shavaluator(redis, opts) {
      this.redis = redis;
      this.scripts = {};
      this.config = _.extend({}, defaultConfig);
      if (opts != null) {
        _.extend(this.config, opts);
      }
    }

    Shavaluator.prototype.add = function(scripts, opts) {
      var lua, scriptName, _ref1, _results;

      if (opts == null) {
        opts = {};
      }
      _results = [];
      for (scriptName in scripts) {
        lua = scripts[scriptName];
        this.scripts[scriptName] = this.constructor.hashifyScript(lua);
        if (((_ref1 = opts.autobind) != null ? _ref1 : this.config.autobind) && (this[scriptName] == null)) {
          _results.push(this._bind(scriptName));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Shavaluator.prototype._bind = function(scriptName) {
      var _this = this;

      return this[scriptName] = function() {
        var params;

        params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this["eval"].apply(_this, [scriptName].concat(__slice.call(params)));
      };
    };

    Shavaluator.prototype["eval"] = function() {
      var callback, params, script, scriptName, _ref1,
        _this = this;

      scriptName = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref1 = Shavaluator._parseEvalParams.apply(Shavaluator, params), params = _ref1.params, callback = _ref1.callback;
      script = this.scripts[scriptName];
      if (!script) {
        if (callback) {
          process.nextTick(function() {
            var err;

            err = new Error("'" + scriptName + "' script was not added");
            return callback(err);
          });
        }
        return;
      }
      return this.redis.evalsha([script.sha].concat(params), function(err, res) {
        var evalParams, _ref2;

        if (err != null) {
          if (/NOSCRIPT/.test(err.message)) {
            evalParams = [script.lua].concat(params);
            if (callback != null) {
              evalParams.push(callback);
            }
            return (_ref2 = _this.redis)["eval"].apply(_ref2, evalParams);
          } else if (callback != null) {
            return callback(err, res);
          }
        } else if (callback != null) {
          return callback(err, res);
        }
      });
    };

    return Shavaluator;

  })();

}).call(this);
